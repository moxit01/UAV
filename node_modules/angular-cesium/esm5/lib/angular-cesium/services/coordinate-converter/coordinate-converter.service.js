/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { CesiumService } from '../cesium/cesium.service';
import * as geodesy from 'geodesy';
import { LatLonEllipsoidal, Utm } from 'geodesy';
/** @type {?} */
var LatLonVectors = geodesy['LatLonVectors'];
// doesnt exists on typings
window['geodesy'] = geodesy;
/**
 *  Given different types of coordinates, we provide you a service converting those types to the most common other types.
 *  We are using the geodesy implementation of UTM conversion. see: https://github.com/chrisveness/geodesy.
 *
 * \@example
 * import { Component, OnInit } from '\@angular/core';
 * import { CoordinateConverter } from 'angular2-cesium';
 *
 * \@Component({
 * 		selector:'my-component',
 * 		template:'<div>{{showCartographic}}</div>',
 * 		providers:[CoordinateConverter]
 * })
 * export class MyComponent implements OnInit {
 * 		showCartographic;
 *
 * 		constructor(private coordinateConverter:CoordinateConverter){
 * 		}
 *
 * 		ngOnInit(){
 * 			this.showCartographic = this.coordinateConverter.degreesToCartographic(5, 5, 5);
 *  }
 * }
 *
 */
var CoordinateConverter = /** @class */ (function () {
    function CoordinateConverter(cesiumService) {
        this.cesiumService = cesiumService;
    }
    /**
     * @param {?} cartesian3
     * @param {?=} ellipsoid
     * @return {?}
     */
    CoordinateConverter.cartesian3ToLatLon = /**
     * @param {?} cartesian3
     * @param {?=} ellipsoid
     * @return {?}
     */
    function (cartesian3, ellipsoid) {
        /** @type {?} */
        var cart = Cesium.Cartographic.fromCartesian(cartesian3, ellipsoid);
        return {
            lon: Cesium.Math.toDegrees(cart.longitude),
            lat: Cesium.Math.toDegrees(cart.latitude),
            height: cart.height
        };
    };
    /**
     * @param {?} screenPos
     * @param {?=} addMapCanvasBoundsToPos
     * @return {?}
     */
    CoordinateConverter.prototype.screenToCartesian3 = /**
     * @param {?} screenPos
     * @param {?=} addMapCanvasBoundsToPos
     * @return {?}
     */
    function (screenPos, addMapCanvasBoundsToPos) {
        if (!this.cesiumService) {
            throw new Error('ANGULAR2-CESIUM - Cesium service should be provided in order' +
                ' to do screen position calculations');
        }
        else {
            /** @type {?} */
            var screenPosition = tslib_1.__assign({}, screenPos);
            if (addMapCanvasBoundsToPos) {
                /** @type {?} */
                var mapBounds = this.cesiumService.getViewer().canvas.getBoundingClientRect();
                screenPosition.x += mapBounds.left;
                screenPosition.y += mapBounds.top;
            }
            /** @type {?} */
            var camera = this.cesiumService.getViewer().camera;
            return camera.pickEllipsoid(screenPosition);
        }
    };
    /**
     * @param {?} screenPos
     * @param {?=} ellipsoid
     * @return {?}
     */
    CoordinateConverter.prototype.screenToCartographic = /**
     * @param {?} screenPos
     * @param {?=} ellipsoid
     * @return {?}
     */
    function (screenPos, ellipsoid) {
        return this.cartesian3ToCartographic(this.screenToCartesian3(screenPos), ellipsoid);
    };
    /**
     * @param {?} cartesian
     * @param {?=} ellipsoid
     * @return {?}
     */
    CoordinateConverter.prototype.cartesian3ToCartographic = /**
     * @param {?} cartesian
     * @param {?=} ellipsoid
     * @return {?}
     */
    function (cartesian, ellipsoid) {
        return Cesium.Cartographic.fromCartesian(cartesian, ellipsoid);
    };
    /**
     * @param {?} longitude
     * @param {?} latitude
     * @param {?=} height
     * @return {?}
     */
    CoordinateConverter.prototype.degreesToCartographic = /**
     * @param {?} longitude
     * @param {?} latitude
     * @param {?=} height
     * @return {?}
     */
    function (longitude, latitude, height) {
        return Cesium.Cartographic.fromDegrees(longitude, latitude, height);
    };
    /**
     * @param {?} longitude
     * @param {?} latitude
     * @param {?=} height
     * @return {?}
     */
    CoordinateConverter.prototype.radiansToCartographic = /**
     * @param {?} longitude
     * @param {?} latitude
     * @param {?=} height
     * @return {?}
     */
    function (longitude, latitude, height) {
        return Cesium.Cartographic.fromRadians(longitude, latitude, height);
    };
    /**
     * @param {?} longitude
     * @param {?} latitude
     * @return {?}
     */
    CoordinateConverter.prototype.degreesToUTM = /**
     * @param {?} longitude
     * @param {?} latitude
     * @return {?}
     */
    function (longitude, latitude) {
        return new LatLonEllipsoidal(latitude, longitude).toUtm();
    };
    /**
     * @param {?} zone
     * @param {?} hemisphereType
     * @param {?} easting
     * @param {?} northing
     * @return {?}
     */
    CoordinateConverter.prototype.UTMToDegrees = /**
     * @param {?} zone
     * @param {?} hemisphereType
     * @param {?} easting
     * @param {?} northing
     * @return {?}
     */
    function (zone, hemisphereType, easting, northing) {
        return this.geodesyToCesiumObject(new Utm(zone, hemisphereType, easting, northing).toLatLonE());
    };
    /**
     * @private
     * @param {?} geodesyRadians
     * @return {?}
     */
    CoordinateConverter.prototype.geodesyToCesiumObject = /**
     * @private
     * @param {?} geodesyRadians
     * @return {?}
     */
    function (geodesyRadians) {
        return {
            longitude: geodesyRadians.lon,
            latitude: geodesyRadians.lat,
            height: geodesyRadians['height'] ? geodesyRadians['height'] : 0
        };
    };
    /**
     * middle point between two points
     * @param first  (latitude,longitude) in radians
     * @param second (latitude,longitude) in radians
     */
    /**
     * middle point between two points
     * @param {?} first  (latitude,longitude) in radians
     * @param {?} second (latitude,longitude) in radians
     * @return {?}
     */
    CoordinateConverter.prototype.midPointToCartesian3 = /**
     * middle point between two points
     * @param {?} first  (latitude,longitude) in radians
     * @param {?} second (latitude,longitude) in radians
     * @return {?}
     */
    function (first, second) {
        /** @type {?} */
        var toDeg = function (rad) { return Cesium.Math.toDegrees(rad); };
        /** @type {?} */
        var firstPoint = new LatLonVectors(toDeg(first.latitude), toDeg(first.longitude));
        /** @type {?} */
        var secondPoint = new LatLonVectors(toDeg(second.latitude), toDeg(second.longitude));
        /** @type {?} */
        var middlePoint = firstPoint.midpointTo(secondPoint);
        return Cesium.Cartesian3.fromDegrees(middlePoint.lon, middlePoint.lat);
    };
    /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    CoordinateConverter.prototype.middlePointByScreen = /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    function (position0, position1) {
        /** @type {?} */
        var scene = this.cesiumService.getScene();
        /** @type {?} */
        var screenPosition1 = Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position0);
        /** @type {?} */
        var screenPosition2 = Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position1);
        /** @type {?} */
        var middleScreenPoint = new Cesium.Cartesian2((screenPosition2.x + screenPosition1.x) / 2.0, (screenPosition2.y + screenPosition1.y) / 2.0);
        return scene.pickPosition(middleScreenPoint);
    };
    /**
     * initial bearing between two points
     *
     * * @return bearing in degrees
     * @param first - {latitude,longitude} in radians
     * @param second - {latitude,longitude} in radians
     */
    /**
     * initial bearing between two points
     *
     * * \@return bearing in degrees
     * @param {?} first - {latitude,longitude} in radians
     * @param {?} second - {latitude,longitude} in radians
     * @return {?}
     */
    CoordinateConverter.prototype.bearingTo = /**
     * initial bearing between two points
     *
     * * \@return bearing in degrees
     * @param {?} first - {latitude,longitude} in radians
     * @param {?} second - {latitude,longitude} in radians
     * @return {?}
     */
    function (first, second) {
        /** @type {?} */
        var toDeg = function (rad) { return Cesium.Math.toDegrees(rad); };
        /** @type {?} */
        var firstPoint = new LatLonVectors(toDeg(first.latitude), toDeg(first.longitude));
        /** @type {?} */
        var secondPoint = new LatLonVectors(toDeg(second.latitude), toDeg(second.longitude));
        /** @type {?} */
        var bearing = firstPoint.bearingTo(secondPoint);
        return bearing;
    };
    /**
     * initial bearing between two points
     *
     * @return bearing in degrees
     */
    /**
     * initial bearing between two points
     *
     * @param {?} firstCartesian3
     * @param {?} secondCartesian3
     * @return {?} bearing in degrees
     */
    CoordinateConverter.prototype.bearingToCartesian = /**
     * initial bearing between two points
     *
     * @param {?} firstCartesian3
     * @param {?} secondCartesian3
     * @return {?} bearing in degrees
     */
    function (firstCartesian3, secondCartesian3) {
        /** @type {?} */
        var firstCart = Cesium.Cartographic.fromCartesian(firstCartesian3);
        /** @type {?} */
        var secondCart = Cesium.Cartographic.fromCartesian(secondCartesian3);
        return this.bearingTo(firstCart, secondCart);
    };
    CoordinateConverter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CoordinateConverter.ctorParameters = function () { return [
        { type: CesiumService, decorators: [{ type: Optional }] }
    ]; };
    return CoordinateConverter;
}());
export { CoordinateConverter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CoordinateConverter.prototype.cesiumService;
}
//# sourceMappingURL=data:application/json;base64,