/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var ViewerFactory = /** @class */ (function () {
    function ViewerFactory() {
        this.cesium = Cesium;
    }
    /**
     * Creates a viewer with default or custom options
     * @param mapContainer - container to initialize the viewer on
     * @param options - Options to create the viewer with - Optional
     *
     * @returns new viewer
     */
    /**
     * Creates a viewer with default or custom options
     * @param {?} mapContainer - container to initialize the viewer on
     * @param {?=} options - Options to create the viewer with - Optional
     *
     * @return {?} new viewer
     */
    ViewerFactory.prototype.createViewer = /**
     * Creates a viewer with default or custom options
     * @param {?} mapContainer - container to initialize the viewer on
     * @param {?=} options - Options to create the viewer with - Optional
     *
     * @return {?} new viewer
     */
    function (mapContainer, options) {
        /** @type {?} */
        var viewer = null;
        if (options) {
            viewer = new this.cesium.Viewer(mapContainer, tslib_1.__assign({ contextOptions: {
                    webgl: { preserveDrawingBuffer: true }
                } }, options));
        }
        else {
            viewer = new this.cesium.Viewer(mapContainer, {
                contextOptions: {
                    webgl: { preserveDrawingBuffer: true }
                },
            });
        }
        return viewer;
    };
    ViewerFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ViewerFactory.ctorParameters = function () { return []; };
    return ViewerFactory;
}());
export { ViewerFactory };
if (false) {
    /** @type {?} */
    ViewerFactory.prototype.cesium;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2VyLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2VzaXVtLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXItY2VzaXVtL3NlcnZpY2VzL3ZpZXdlci1mYWN0b3J5L3ZpZXdlci1mYWN0b3J5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDO0lBS0U7UUFDRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7OztPQU1HOzs7Ozs7OztJQUNILG9DQUFZOzs7Ozs7O0lBQVosVUFBYSxZQUF5QixFQUFFLE9BQWE7O1lBQy9DLE1BQU0sR0FBRyxJQUFJO1FBQ2pCLElBQUksT0FBTyxFQUFFO1lBQ1gsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxxQkFDMUMsY0FBYyxFQUFFO29CQUNkLEtBQUssRUFBRSxFQUFDLHFCQUFxQixFQUFFLElBQUksRUFBQztpQkFDckMsSUFDRSxPQUFPLEVBQ1YsQ0FBQztTQUNKO2FBQU07WUFDTCxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQzFDO2dCQUNFLGNBQWMsRUFBRTtvQkFDZCxLQUFLLEVBQUUsRUFBQyxxQkFBcUIsRUFBRSxJQUFJLEVBQUM7aUJBQ3JDO2FBQ0YsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztnQkFuQ0YsVUFBVTs7OztJQW9DWCxvQkFBQztDQUFBLEFBcENELElBb0NDO1NBbkNZLGFBQWE7OztJQUN4QiwrQkFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFZpZXdlckZhY3Rvcnkge1xuICBjZXNpdW06IGFueTtcblxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2VzaXVtID0gQ2VzaXVtO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB2aWV3ZXIgd2l0aCBkZWZhdWx0IG9yIGN1c3RvbSBvcHRpb25zXG4gICAqIEBwYXJhbSBtYXBDb250YWluZXIgLSBjb250YWluZXIgdG8gaW5pdGlhbGl6ZSB0aGUgdmlld2VyIG9uXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjcmVhdGUgdGhlIHZpZXdlciB3aXRoIC0gT3B0aW9uYWxcbiAgICpcbiAgICogQHJldHVybnMgbmV3IHZpZXdlclxuICAgKi9cbiAgY3JlYXRlVmlld2VyKG1hcENvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICBsZXQgdmlld2VyID0gbnVsbDtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdmlld2VyID0gbmV3IHRoaXMuY2VzaXVtLlZpZXdlcihtYXBDb250YWluZXIsIHtcbiAgICAgICAgY29udGV4dE9wdGlvbnM6IHtcbiAgICAgICAgICB3ZWJnbDoge3ByZXNlcnZlRHJhd2luZ0J1ZmZlcjogdHJ1ZX1cbiAgICAgICAgfSxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpZXdlciA9IG5ldyB0aGlzLmNlc2l1bS5WaWV3ZXIobWFwQ29udGFpbmVyLFxuICAgICAgICB7XG4gICAgICAgICAgY29udGV4dE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHdlYmdsOiB7cHJlc2VydmVEcmF3aW5nQnVmZmVyOiB0cnVlfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB2aWV3ZXI7XG4gIH1cbn1cbiJdfQ==