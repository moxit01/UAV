/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';
import { defaultLabelProps } from './label-props';
var EditableEllipse = /** @class */ (function (_super) {
    tslib_1.__extends(EditableEllipse, _super);
    function EditableEllipse(id, ellipsesLayer, pointsLayer, coordinateConverter, options) {
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.ellipsesLayer = ellipsesLayer;
        _this.pointsLayer = pointsLayer;
        _this.coordinateConverter = coordinateConverter;
        _this.options = options;
        _this._rotation = 0;
        _this.doneCreation = false;
        _this._enableEdit = true;
        _this._minorRadiusPoints = [];
        _this._labels = [];
        _this._ellipseProps = tslib_1.__assign({}, options.ellipseProps);
        _this._pointProps = tslib_1.__assign({}, options.pointProps);
        return _this;
    }
    Object.defineProperty(EditableEllipse.prototype, "labels", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labels;
        },
        set: /**
         * @param {?} labels
         * @return {?}
         */
        function (labels) {
            var _this = this;
            if (!labels || !this._center) {
                return;
            }
            this._labels = labels.map(function (label, index) {
                if (!label.position) {
                    if (index === 0) {
                        label.position = _this._center.getPosition();
                    }
                    else if (index === 1) {
                        label.position = _this._majorRadiusPoint
                            ? Cesium.Cartesian3.midpoint(_this.getCenter(), _this._majorRadiusPoint.getPosition(), new Cesium.Cartesian3())
                            : new Cesium.Cartesian3();
                    }
                    else if (index === 2) {
                        label.position =
                            _this._minorRadiusPoints.length > 0 && _this._minorRadius
                                ? Cesium.Cartesian3.midpoint(_this.getCenter(), _this.getMinorRadiusPointPosition(), new Cesium.Cartesian3())
                                : new Cesium.Cartesian3();
                    }
                }
                return Object.assign({}, defaultLabelProps, label);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableEllipse.prototype, "polylineProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._polylineProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._polylineProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableEllipse.prototype, "pointProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pointProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pointProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableEllipse.prototype, "ellipseProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._ellipseProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._ellipseProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableEllipse.prototype, "center", {
        get: /**
         * @return {?}
         */
        function () {
            return this._center;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableEllipse.prototype, "majorRadiusPoint", {
        get: /**
         * @return {?}
         */
        function () {
            return this._majorRadiusPoint;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getMajorRadiusPointPosition = /**
     * @return {?}
     */
    function () {
        if (!this._majorRadiusPoint) {
            return undefined;
        }
        return this._majorRadiusPoint.getPosition();
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getMinorRadiusPointPosition = /**
     * @return {?}
     */
    function () {
        if (this._minorRadiusPoints.length < 1) {
            return undefined;
        }
        return this._minorRadiusPoints[0].getPosition();
    };
    Object.defineProperty(EditableEllipse.prototype, "enableEdit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableEdit;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._enableEdit = value;
            this._center.show = value;
            this._majorRadiusPoint.show = value;
            this.updatePointsLayer();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} center
     * @param {?} majorRadius
     * @param {?=} rotation
     * @param {?=} minorRadius
     * @param {?=} centerPointProp
     * @param {?=} radiusPointProp
     * @param {?=} ellipseProp
     * @return {?}
     */
    EditableEllipse.prototype.setManually = /**
     * @param {?} center
     * @param {?} majorRadius
     * @param {?=} rotation
     * @param {?=} minorRadius
     * @param {?=} centerPointProp
     * @param {?=} radiusPointProp
     * @param {?=} ellipseProp
     * @return {?}
     */
    function (center, majorRadius, rotation, minorRadius, centerPointProp, radiusPointProp, ellipseProp) {
        if (rotation === void 0) { rotation = Math.PI / 2; }
        if (centerPointProp === void 0) { centerPointProp = this.pointProps; }
        if (radiusPointProp === void 0) { radiusPointProp = this.pointProps; }
        if (ellipseProp === void 0) { ellipseProp = this.ellipseProps; }
        if (majorRadius < minorRadius) {
            throw new Error('Major radius muse be equal or greater than minor radius');
        }
        this._rotation = rotation;
        this._majorRadius = majorRadius;
        if (!this._center) {
            this._center = new EditPoint(this.id, center, centerPointProp);
        }
        else {
            this._center.setPosition(center);
        }
        /** @type {?} */
        var majorRadiusPosition = GeoUtilsService.pointByLocationDistanceAndAzimuth(this.center.getPosition(), majorRadius, rotation);
        if (!this._majorRadiusPoint) {
            this._majorRadiusPoint = new EditPoint(this.id, majorRadiusPosition, radiusPointProp);
        }
        else {
            this._majorRadiusPoint.setPosition(majorRadiusPosition);
        }
        if (minorRadius) {
            this._minorRadius = minorRadius;
        }
        this.ellipseProps = ellipseProp;
        this.doneCreation = true;
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditableEllipse.prototype.addPoint = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.doneCreation) {
            return;
        }
        if (!this._center) {
            this._center = new EditPoint(this.id, position, this.pointProps);
            this._majorRadiusPoint = new EditPoint(this.id, position.clone(), this.pointProps);
            this._majorRadius = 0;
        }
        this.updateRotation();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.transformToEllipse = /**
     * @return {?}
     */
    function () {
        if (this._minorRadius) {
            return;
        }
        this._minorRadius = this.getMajorRadius();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditableEllipse.prototype.addLastPoint = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.doneCreation || !this._center || !this._majorRadiusPoint) {
            return;
        }
        /** @type {?} */
        var newRadius = GeoUtilsService.distance(this._center.getPosition(), position);
        this._majorRadiusPoint.setPosition(position);
        this._majorRadius = newRadius;
        this.doneCreation = true;
        if (!this.options.circleToEllipseTransformation) {
            this._minorRadius = this._majorRadius;
        }
        this.updateRotation();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    };
    /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    EditableEllipse.prototype.movePoint = /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    function (toPosition, editPoint) {
        if (!this._center || !this._majorRadiusPoint) {
            return;
        }
        /** @type {?} */
        var newRadius = GeoUtilsService.distance(this._center.getPosition(), toPosition);
        if (this.majorRadiusPoint === editPoint) {
            if (newRadius < this._minorRadius) {
                this._majorRadius = this._minorRadius;
                this._majorRadiusPoint.setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this.getCenter(), this._minorRadius, this._rotation));
            }
            else {
                this.majorRadiusPoint.setPosition(toPosition);
                this._majorRadius = newRadius;
            }
        }
        else {
            if (newRadius > this._majorRadius) {
                this._minorRadius = this._majorRadius;
            }
            else {
                this._minorRadius = newRadius;
            }
        }
        this.updateRotation();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    };
    /**
     * @param {?} dragStartPosition
     * @param {?} dragEndPosition
     * @return {?}
     */
    EditableEllipse.prototype.moveEllipse = /**
     * @param {?} dragStartPosition
     * @param {?} dragEndPosition
     * @return {?}
     */
    function (dragStartPosition, dragEndPosition) {
        if (!this.doneCreation) {
            return;
        }
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = dragStartPosition;
        }
        /** @type {?} */
        var majorRadius = this.getMajorRadius();
        /** @type {?} */
        var rotation = this.getRotation();
        /** @type {?} */
        var delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, dragEndPosition);
        /** @type {?} */
        var newCenterPosition = GeoUtilsService.addDeltaToPosition(this.getCenter(), delta, true);
        this._center.setPosition(newCenterPosition);
        this.majorRadiusPoint.setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this.getCenter(), majorRadius, rotation));
        this.updatePointsLayer();
        this.updateMinorRadiusEditPoints();
        this.updateEllipsesLayer();
        this.lastDraggedToPosition = dragEndPosition;
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.endMoveEllipse = /**
     * @return {?}
     */
    function () {
        this.lastDraggedToPosition = undefined;
    };
    /**
     * @private
     * @return {?}
     */
    EditableEllipse.prototype.updateMinorRadiusEditPoints = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._minorRadius === undefined) {
            return;
        }
        if (this._minorRadiusPoints.length === 0) {
            this._minorRadiusPoints.push(new EditPoint(this.id, new Cesium.Cartesian3(), this.pointProps, true));
            this._minorRadiusPoints.push(new EditPoint(this.id, new Cesium.Cartesian3(), this.pointProps, true));
        }
        this._minorRadiusPoints[0].setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this._center.getPosition(), this._minorRadius, this.getRotation() - Math.PI / 2));
        this._minorRadiusPoints[1].setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this._center.getPosition(), this._minorRadius, this.getRotation() + Math.PI / 2));
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getMajorRadius = /**
     * @return {?}
     */
    function () {
        return this._majorRadius || 0;
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getMinorRadius = /**
     * @return {?}
     */
    function () {
        if (this._minorRadius === undefined) {
            return this.getMajorRadius();
        }
        else {
            return this._minorRadius;
        }
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getRotation = /**
     * @return {?}
     */
    function () {
        return this._rotation || 0;
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.updateRotation = /**
     * @return {?}
     */
    function () {
        if (!this._majorRadiusPoint) {
            return 0;
        }
        /** @type {?} */
        var azimuthInDegrees = this.coordinateConverter.bearingToCartesian(this.getCenter(), this._majorRadiusPoint.getPosition());
        this._rotation = Cesium.Math.toRadians(azimuthInDegrees);
        return this._rotation;
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getRotationCallbackProperty = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Cesium.CallbackProperty(function () { return Math.PI / 2 - _this.getRotation(); }, false);
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getMinorRadiusCallbackProperty = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Cesium.CallbackProperty(function () { return _this.getMinorRadius(); }, false);
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getMajorRadiusCallbackProperty = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Cesium.CallbackProperty(function () { return _this.getMajorRadius(); }, false);
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getCenter = /**
     * @return {?}
     */
    function () {
        return this._center ? this._center.getPosition() : undefined;
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getCenterCallbackProperty = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Cesium.CallbackProperty(function () { return _this.getCenter(); }, false);
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.dispose = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._center) {
            this.pointsLayer.remove(this._center.getId());
        }
        if (this._majorRadiusPoint) {
            this.pointsLayer.remove(this._majorRadiusPoint.getId());
        }
        if (this._minorRadiusPoints) {
            this._minorRadiusPoints.forEach(function (point) { return _this.pointsLayer.remove(point.getId()); });
        }
        this.ellipsesLayer.remove(this.id);
    };
    /**
     * @return {?}
     */
    EditableEllipse.prototype.getId = /**
     * @return {?}
     */
    function () {
        return this.id;
    };
    /**
     * @private
     * @return {?}
     */
    EditableEllipse.prototype.updateEllipsesLayer = /**
     * @private
     * @return {?}
     */
    function () {
        this.ellipsesLayer.update(this, this.id);
    };
    /**
     * @private
     * @return {?}
     */
    EditableEllipse.prototype.updatePointsLayer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._center) {
            this.pointsLayer.update(this._center, this._center.getId());
        }
        if (this._majorRadiusPoint) {
            this.pointsLayer.update(this._majorRadiusPoint, this._majorRadiusPoint.getId());
        }
        if (this._minorRadiusPoints.length > 0) {
            this.pointsLayer.update(this._minorRadiusPoints[0], this._minorRadiusPoints[0].getId());
            this.pointsLayer.update(this._minorRadiusPoints[1], this._minorRadiusPoints[1].getId());
        }
    };
    return EditableEllipse;
}(AcEntity));
export { EditableEllipse };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._center;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._majorRadiusPoint;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._majorRadius;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._minorRadius;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._rotation;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.doneCreation;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._enableEdit;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._minorRadiusPoints;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.lastDraggedToPosition;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._ellipseProps;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._pointProps;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._polylineProps;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._labels;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.ellipsesLayer;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.pointsLayer;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.coordinateConverter;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,