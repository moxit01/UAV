/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AcEntity } from '../../angular-cesium/models/ac-entity';
export class EditPoint extends AcEntity {
    /**
     * @param {?} entityId
     * @param {?} position
     * @param {?=} pointProps
     * @param {?=} virtualPoint
     */
    constructor(entityId, position, pointProps, virtualPoint = false) {
        super();
        this._show = true;
        this.editedEntityId = entityId;
        this.position = position;
        this.id = this.generateId();
        this.pointProps = Object.assign({}, pointProps);
        this._virtualEditPoint = virtualPoint;
    }
    /**
     * @return {?}
     */
    get show() {
        return this._show;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set show(value) {
        this._show = value;
    }
    /**
     * @return {?}
     */
    get props() {
        return this.pointProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set props(value) {
        this.pointProps = value;
    }
    /**
     * @return {?}
     */
    isVirtualEditPoint() {
        return this._virtualEditPoint;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setVirtualEditPoint(value) {
        this._virtualEditPoint = value;
    }
    /**
     * @return {?}
     */
    getEditedEntityId() {
        return this.editedEntityId;
    }
    /**
     * @return {?}
     */
    getPosition() {
        return this.position.clone();
    }
    /**
     * @return {?}
     */
    getPositionCallbackProperty() {
        return new Cesium.CallbackProperty(this.getPosition.bind(this), false);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    setPosition(position) {
        this.position.x = position.x;
        this.position.y = position.y;
        this.position.z = position.z;
    }
    /**
     * @return {?}
     */
    getId() {
        return this.id;
    }
    /**
     * @private
     * @return {?}
     */
    generateId() {
        return 'edit-point-' + EditPoint.counter++;
    }
}
EditPoint.counter = 0;
if (false) {
    /** @type {?} */
    EditPoint.counter;
    /**
     * @type {?}
     * @private
     */
    EditPoint.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditPoint.prototype.editedEntityId;
    /**
     * @type {?}
     * @private
     */
    EditPoint.prototype.position;
    /**
     * @type {?}
     * @private
     */
    EditPoint.prototype._virtualEditPoint;
    /**
     * @type {?}
     * @private
     */
    EditPoint.prototype.pointProps;
    /**
     * @type {?}
     * @private
     */
    EditPoint.prototype._show;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1wb2ludC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2VzaXVtLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXItY2VzaXVtLXdpZGdldHMvbW9kZWxzL2VkaXQtcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUlqRSxNQUFNLE9BQU8sU0FBVSxTQUFRLFFBQVE7Ozs7Ozs7SUFTckMsWUFBWSxRQUFnQixFQUFFLFFBQW9CLEVBQUUsVUFBdUIsRUFBRSxZQUFZLEdBQUcsS0FBSztRQUMvRixLQUFLLEVBQUUsQ0FBQztRQUhGLFVBQUssR0FBRyxJQUFJLENBQUM7UUFJbkIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLFVBQVUscUJBQU8sVUFBVSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFlBQVksQ0FBQztJQUN4QyxDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBRUQsSUFBSSxJQUFJLENBQUMsS0FBSztRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFRCxJQUFJLEtBQUssQ0FBQyxLQUFpQjtRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsbUJBQW1CLENBQUMsS0FBYztRQUNoQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVELDJCQUEyQjtRQUN6QixPQUFPLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Ozs7O0lBR0QsV0FBVyxDQUFDLFFBQW9CO1FBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0gsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ2pCLENBQUM7Ozs7O0lBRU8sVUFBVTtRQUNoQixPQUFPLGFBQWEsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0MsQ0FBQzs7QUFsRU0saUJBQU8sR0FBRyxDQUFDLENBQUM7OztJQUFuQixrQkFBbUI7Ozs7O0lBQ25CLHVCQUFtQjs7Ozs7SUFDbkIsbUNBQStCOzs7OztJQUMvQiw2QkFBNkI7Ozs7O0lBQzdCLHNDQUFtQzs7Ozs7SUFDbkMsK0JBQStCOzs7OztJQUMvQiwwQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY0VudGl0eSB9IGZyb20gJy4uLy4uL2FuZ3VsYXItY2VzaXVtL21vZGVscy9hYy1lbnRpdHknO1xuaW1wb3J0IHsgQ2FydGVzaWFuMyB9IGZyb20gJy4uLy4uL2FuZ3VsYXItY2VzaXVtL21vZGVscy9jYXJ0ZXNpYW4zJztcbmltcG9ydCB7IFBvaW50UHJvcHMgfSBmcm9tICcuL3BvbHlsaW5lLWVkaXQtb3B0aW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBFZGl0UG9pbnQgZXh0ZW5kcyBBY0VudGl0eSB7XG4gIHN0YXRpYyBjb3VudGVyID0gMDtcbiAgcHJpdmF0ZSBpZDogc3RyaW5nO1xuICBwcml2YXRlIGVkaXRlZEVudGl0eUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgcG9zaXRpb246IENhcnRlc2lhbjM7XG4gIHByaXZhdGUgX3ZpcnR1YWxFZGl0UG9pbnQ6IGJvb2xlYW47XG4gIHByaXZhdGUgcG9pbnRQcm9wczogUG9pbnRQcm9wcztcbiAgcHJpdmF0ZSBfc2hvdyA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoZW50aXR5SWQ6IHN0cmluZywgcG9zaXRpb246IENhcnRlc2lhbjMsIHBvaW50UHJvcHM/OiBQb2ludFByb3BzLCB2aXJ0dWFsUG9pbnQgPSBmYWxzZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5lZGl0ZWRFbnRpdHlJZCA9IGVudGl0eUlkO1xuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICB0aGlzLmlkID0gdGhpcy5nZW5lcmF0ZUlkKCk7XG4gICAgdGhpcy5wb2ludFByb3BzID0gey4uLnBvaW50UHJvcHN9O1xuICAgIHRoaXMuX3ZpcnR1YWxFZGl0UG9pbnQgPSB2aXJ0dWFsUG9pbnQ7XG4gIH1cblxuICBnZXQgc2hvdygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvdztcbiAgfVxuXG4gIHNldCBzaG93KHZhbHVlKSB7XG4gICAgdGhpcy5fc2hvdyA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHByb3BzKCk6IFBvaW50UHJvcHMge1xuICAgIHJldHVybiB0aGlzLnBvaW50UHJvcHM7XG4gIH1cblxuICBzZXQgcHJvcHModmFsdWU6IFBvaW50UHJvcHMpIHtcbiAgICB0aGlzLnBvaW50UHJvcHMgPSB2YWx1ZTtcbiAgfVxuXG4gIGlzVmlydHVhbEVkaXRQb2ludCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fdmlydHVhbEVkaXRQb2ludDtcbiAgfVxuXG4gIHNldFZpcnR1YWxFZGl0UG9pbnQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl92aXJ0dWFsRWRpdFBvaW50ID0gdmFsdWU7XG4gIH1cblxuICBnZXRFZGl0ZWRFbnRpdHlJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVkaXRlZEVudGl0eUlkO1xuICB9XG5cbiAgZ2V0UG9zaXRpb24oKTogQ2FydGVzaWFuMyB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24uY2xvbmUoKTtcbiAgfVxuXG4gIGdldFBvc2l0aW9uQ2FsbGJhY2tQcm9wZXJ0eSgpOiBDYXJ0ZXNpYW4zIHtcbiAgICByZXR1cm4gbmV3IENlc2l1bS5DYWxsYmFja1Byb3BlcnR5KHRoaXMuZ2V0UG9zaXRpb24uYmluZCh0aGlzKSwgZmFsc2UpO1xuICB9XG5cblxuICBzZXRQb3NpdGlvbihwb3NpdGlvbjogQ2FydGVzaWFuMykge1xuICAgIHRoaXMucG9zaXRpb24ueCA9IHBvc2l0aW9uLng7XG4gICAgdGhpcy5wb3NpdGlvbi55ID0gcG9zaXRpb24ueTtcbiAgICB0aGlzLnBvc2l0aW9uLnogPSBwb3NpdGlvbi56O1xuICB9XG5cbiAgZ2V0SWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pZDtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnZWRpdC1wb2ludC0nICsgRWRpdFBvaW50LmNvdW50ZXIrKztcbiAgfVxufVxuIl19