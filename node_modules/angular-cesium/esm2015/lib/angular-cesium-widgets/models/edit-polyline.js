/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AcEntity } from '../../angular-cesium/models/ac-entity';
export class EditPolyline extends AcEntity {
    /**
     * @param {?} entityId
     * @param {?} startPosition
     * @param {?} endPosition
     * @param {?=} polylineProps
     */
    constructor(entityId, startPosition, endPosition, polylineProps) {
        super();
        this.editedEntityId = entityId;
        this.id = this.generateId();
        this.positions = [startPosition, endPosition];
        this._polylineProps = Object.assign({}, polylineProps);
    }
    /**
     * @return {?}
     */
    get props() {
        return this._polylineProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set props(value) {
        this._polylineProps = value;
    }
    /**
     * @return {?}
     */
    getEditedEntityId() {
        return this.editedEntityId;
    }
    /**
     * @return {?}
     */
    getPositions() {
        return this.positions.map(p => p.clone());
    }
    /**
     * @return {?}
     */
    getPositionsCallbackProperty() {
        return new Cesium.CallbackProperty(this.getPositions.bind(this), false);
    }
    /**
     * @return {?}
     */
    validatePositions() {
        return this.positions[0] !== undefined && this.positions[1] !== undefined;
    }
    /**
     * @return {?}
     */
    getStartPosition() {
        return this.positions[0];
    }
    /**
     * @return {?}
     */
    getEndPosition() {
        return this.positions[1];
    }
    /**
     * @param {?} position
     * @return {?}
     */
    setStartPosition(position) {
        this.positions[0] = position;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    setEndPosition(position) {
        this.positions[1] = position;
    }
    /**
     * @return {?}
     */
    getId() {
        return this.id;
    }
    /**
     * @private
     * @return {?}
     */
    generateId() {
        return 'edit-polyline-' + EditPolyline.counter++;
    }
}
EditPolyline.counter = 0;
if (false) {
    /** @type {?} */
    EditPolyline.counter;
    /**
     * @type {?}
     * @private
     */
    EditPolyline.prototype.editedEntityId;
    /**
     * @type {?}
     * @private
     */
    EditPolyline.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditPolyline.prototype.positions;
    /**
     * @type {?}
     * @private
     */
    EditPolyline.prototype._polylineProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1wb2x5bGluZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2VzaXVtLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXItY2VzaXVtLXdpZGdldHMvbW9kZWxzL2VkaXQtcG9seWxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUlqRSxNQUFNLE9BQU8sWUFBYSxTQUFRLFFBQVE7Ozs7Ozs7SUFPeEMsWUFBWSxRQUFnQixFQUFFLGFBQXlCLEVBQUUsV0FBdUIsRUFBRSxhQUE2QjtRQUM3RyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGNBQWMscUJBQU8sYUFBYSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELElBQUksS0FBSyxDQUFDLEtBQW9CO1FBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFRCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7OztJQUdELDRCQUE0QjtRQUMxQixPQUFPLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFFLENBQUM7Ozs7SUFFRCxpQkFBaUI7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDO0lBQzVFLENBQUM7Ozs7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVELGNBQWM7UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFvQjtRQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxRQUFvQjtRQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUMvQixDQUFDOzs7O0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7OztJQUVPLFVBQVU7UUFDaEIsT0FBTyxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkQsQ0FBQzs7QUE3RE0sb0JBQU8sR0FBRyxDQUFDLENBQUM7OztJQUFuQixxQkFBbUI7Ozs7O0lBQ25CLHNDQUErQjs7Ozs7SUFDL0IsMEJBQW1COzs7OztJQUNuQixpQ0FBZ0M7Ozs7O0lBQ2hDLHNDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjRW50aXR5IH0gZnJvbSAnLi4vLi4vYW5ndWxhci1jZXNpdW0vbW9kZWxzL2FjLWVudGl0eSc7XG5pbXBvcnQgeyBDYXJ0ZXNpYW4zIH0gZnJvbSAnLi4vLi4vYW5ndWxhci1jZXNpdW0vbW9kZWxzL2NhcnRlc2lhbjMnO1xuaW1wb3J0IHsgUG9seWxpbmVQcm9wcyB9IGZyb20gJy4vcG9seWxpbmUtZWRpdC1vcHRpb25zJztcblxuZXhwb3J0IGNsYXNzIEVkaXRQb2x5bGluZSBleHRlbmRzIEFjRW50aXR5IHtcbiAgc3RhdGljIGNvdW50ZXIgPSAwO1xuICBwcml2YXRlIGVkaXRlZEVudGl0eUlkOiBzdHJpbmc7XG4gIHByaXZhdGUgaWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBwb3NpdGlvbnM6IENhcnRlc2lhbjNbXTtcbiAgcHJpdmF0ZSBfcG9seWxpbmVQcm9wczogUG9seWxpbmVQcm9wcztcblxuICBjb25zdHJ1Y3RvcihlbnRpdHlJZDogc3RyaW5nLCBzdGFydFBvc2l0aW9uOiBDYXJ0ZXNpYW4zLCBlbmRQb3NpdGlvbjogQ2FydGVzaWFuMywgcG9seWxpbmVQcm9wcz86IFBvbHlsaW5lUHJvcHMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZWRpdGVkRW50aXR5SWQgPSBlbnRpdHlJZDtcbiAgICB0aGlzLmlkID0gdGhpcy5nZW5lcmF0ZUlkKCk7XG4gICAgdGhpcy5wb3NpdGlvbnMgPSBbc3RhcnRQb3NpdGlvbiwgZW5kUG9zaXRpb25dO1xuICAgIHRoaXMuX3BvbHlsaW5lUHJvcHMgPSB7Li4ucG9seWxpbmVQcm9wc307XG4gIH1cblxuICBnZXQgcHJvcHMoKTogUG9seWxpbmVQcm9wcyB7XG4gICAgcmV0dXJuIHRoaXMuX3BvbHlsaW5lUHJvcHM7XG4gIH1cblxuICBzZXQgcHJvcHModmFsdWU6IFBvbHlsaW5lUHJvcHMpIHtcbiAgICB0aGlzLl9wb2x5bGluZVByb3BzID0gdmFsdWU7XG4gIH1cblxuICBnZXRFZGl0ZWRFbnRpdHlJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVkaXRlZEVudGl0eUlkO1xuICB9XG5cbiAgZ2V0UG9zaXRpb25zKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvbnMubWFwKHAgPT4gcC5jbG9uZSgpKTtcbiAgfVxuXG5cbiAgZ2V0UG9zaXRpb25zQ2FsbGJhY2tQcm9wZXJ0eSgpOiBDYXJ0ZXNpYW4zW10ge1xuICAgIHJldHVybiBuZXcgQ2VzaXVtLkNhbGxiYWNrUHJvcGVydHkodGhpcy5nZXRQb3NpdGlvbnMuYmluZCh0aGlzKSwgZmFsc2UpO1xuICB9XG5cbiAgdmFsaWRhdGVQb3NpdGlvbnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb25zWzBdICE9PSB1bmRlZmluZWQgJiYgdGhpcy5wb3NpdGlvbnNbMV0gIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldFN0YXJ0UG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb25zWzBdO1xuICB9XG5cbiAgZ2V0RW5kUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb25zWzFdO1xuICB9XG5cbiAgc2V0U3RhcnRQb3NpdGlvbihwb3NpdGlvbjogQ2FydGVzaWFuMykge1xuICAgIHRoaXMucG9zaXRpb25zWzBdID0gcG9zaXRpb247XG4gIH1cblxuICBzZXRFbmRQb3NpdGlvbihwb3NpdGlvbjogQ2FydGVzaWFuMykge1xuICAgIHRoaXMucG9zaXRpb25zWzFdID0gcG9zaXRpb247XG4gIH1cblxuICBnZXRJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdlZGl0LXBvbHlsaW5lLScgKyBFZGl0UG9seWxpbmUuY291bnRlcisrO1xuICB9XG59XG4iXX0=