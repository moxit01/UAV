/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';
import { defaultLabelProps } from './label-props';
export class EditableEllipse extends AcEntity {
    /**
     * @param {?} id
     * @param {?} ellipsesLayer
     * @param {?} pointsLayer
     * @param {?} coordinateConverter
     * @param {?} options
     */
    constructor(id, ellipsesLayer, pointsLayer, coordinateConverter, options) {
        super();
        this.id = id;
        this.ellipsesLayer = ellipsesLayer;
        this.pointsLayer = pointsLayer;
        this.coordinateConverter = coordinateConverter;
        this.options = options;
        this._rotation = 0;
        this.doneCreation = false;
        this._enableEdit = true;
        this._minorRadiusPoints = [];
        this._labels = [];
        this._ellipseProps = Object.assign({}, options.ellipseProps);
        this._pointProps = Object.assign({}, options.pointProps);
    }
    /**
     * @return {?}
     */
    get labels() {
        return this._labels;
    }
    /**
     * @param {?} labels
     * @return {?}
     */
    set labels(labels) {
        if (!labels || !this._center) {
            return;
        }
        this._labels = labels.map((label, index) => {
            if (!label.position) {
                if (index === 0) {
                    label.position = this._center.getPosition();
                }
                else if (index === 1) {
                    label.position = this._majorRadiusPoint
                        ? Cesium.Cartesian3.midpoint(this.getCenter(), this._majorRadiusPoint.getPosition(), new Cesium.Cartesian3())
                        : new Cesium.Cartesian3();
                }
                else if (index === 2) {
                    label.position =
                        this._minorRadiusPoints.length > 0 && this._minorRadius
                            ? Cesium.Cartesian3.midpoint(this.getCenter(), this.getMinorRadiusPointPosition(), new Cesium.Cartesian3())
                            : new Cesium.Cartesian3();
                }
            }
            return Object.assign({}, defaultLabelProps, label);
        });
    }
    /**
     * @return {?}
     */
    get polylineProps() {
        return this._polylineProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set polylineProps(value) {
        this._polylineProps = value;
    }
    /**
     * @return {?}
     */
    get pointProps() {
        return this._pointProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pointProps(value) {
        this._pointProps = value;
    }
    /**
     * @return {?}
     */
    get ellipseProps() {
        return this._ellipseProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ellipseProps(value) {
        this._ellipseProps = value;
    }
    /**
     * @return {?}
     */
    get center() {
        return this._center;
    }
    /**
     * @return {?}
     */
    get majorRadiusPoint() {
        return this._majorRadiusPoint;
    }
    /**
     * @return {?}
     */
    getMajorRadiusPointPosition() {
        if (!this._majorRadiusPoint) {
            return undefined;
        }
        return this._majorRadiusPoint.getPosition();
    }
    /**
     * @return {?}
     */
    getMinorRadiusPointPosition() {
        if (this._minorRadiusPoints.length < 1) {
            return undefined;
        }
        return this._minorRadiusPoints[0].getPosition();
    }
    /**
     * @return {?}
     */
    get enableEdit() {
        return this._enableEdit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableEdit(value) {
        this._enableEdit = value;
        this._center.show = value;
        this._majorRadiusPoint.show = value;
        this.updatePointsLayer();
    }
    /**
     * @param {?} center
     * @param {?} majorRadius
     * @param {?=} rotation
     * @param {?=} minorRadius
     * @param {?=} centerPointProp
     * @param {?=} radiusPointProp
     * @param {?=} ellipseProp
     * @return {?}
     */
    setManually(center, majorRadius, rotation = Math.PI / 2, minorRadius, centerPointProp = this.pointProps, radiusPointProp = this.pointProps, ellipseProp = this.ellipseProps) {
        if (majorRadius < minorRadius) {
            throw new Error('Major radius muse be equal or greater than minor radius');
        }
        this._rotation = rotation;
        this._majorRadius = majorRadius;
        if (!this._center) {
            this._center = new EditPoint(this.id, center, centerPointProp);
        }
        else {
            this._center.setPosition(center);
        }
        /** @type {?} */
        const majorRadiusPosition = GeoUtilsService.pointByLocationDistanceAndAzimuth(this.center.getPosition(), majorRadius, rotation);
        if (!this._majorRadiusPoint) {
            this._majorRadiusPoint = new EditPoint(this.id, majorRadiusPosition, radiusPointProp);
        }
        else {
            this._majorRadiusPoint.setPosition(majorRadiusPosition);
        }
        if (minorRadius) {
            this._minorRadius = minorRadius;
        }
        this.ellipseProps = ellipseProp;
        this.doneCreation = true;
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addPoint(position) {
        if (this.doneCreation) {
            return;
        }
        if (!this._center) {
            this._center = new EditPoint(this.id, position, this.pointProps);
            this._majorRadiusPoint = new EditPoint(this.id, position.clone(), this.pointProps);
            this._majorRadius = 0;
        }
        this.updateRotation();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    }
    /**
     * @return {?}
     */
    transformToEllipse() {
        if (this._minorRadius) {
            return;
        }
        this._minorRadius = this.getMajorRadius();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addLastPoint(position) {
        if (this.doneCreation || !this._center || !this._majorRadiusPoint) {
            return;
        }
        /** @type {?} */
        const newRadius = GeoUtilsService.distance(this._center.getPosition(), position);
        this._majorRadiusPoint.setPosition(position);
        this._majorRadius = newRadius;
        this.doneCreation = true;
        if (!this.options.circleToEllipseTransformation) {
            this._minorRadius = this._majorRadius;
        }
        this.updateRotation();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    }
    /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    movePoint(toPosition, editPoint) {
        if (!this._center || !this._majorRadiusPoint) {
            return;
        }
        /** @type {?} */
        const newRadius = GeoUtilsService.distance(this._center.getPosition(), toPosition);
        if (this.majorRadiusPoint === editPoint) {
            if (newRadius < this._minorRadius) {
                this._majorRadius = this._minorRadius;
                this._majorRadiusPoint.setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this.getCenter(), this._minorRadius, this._rotation));
            }
            else {
                this.majorRadiusPoint.setPosition(toPosition);
                this._majorRadius = newRadius;
            }
        }
        else {
            if (newRadius > this._majorRadius) {
                this._minorRadius = this._majorRadius;
            }
            else {
                this._minorRadius = newRadius;
            }
        }
        this.updateRotation();
        this.updateMinorRadiusEditPoints();
        this.updatePointsLayer();
        this.updateEllipsesLayer();
    }
    /**
     * @param {?} dragStartPosition
     * @param {?} dragEndPosition
     * @return {?}
     */
    moveEllipse(dragStartPosition, dragEndPosition) {
        if (!this.doneCreation) {
            return;
        }
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = dragStartPosition;
        }
        /** @type {?} */
        const majorRadius = this.getMajorRadius();
        /** @type {?} */
        const rotation = this.getRotation();
        /** @type {?} */
        const delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, dragEndPosition);
        /** @type {?} */
        const newCenterPosition = GeoUtilsService.addDeltaToPosition(this.getCenter(), delta, true);
        this._center.setPosition(newCenterPosition);
        this.majorRadiusPoint.setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this.getCenter(), majorRadius, rotation));
        this.updatePointsLayer();
        this.updateMinorRadiusEditPoints();
        this.updateEllipsesLayer();
        this.lastDraggedToPosition = dragEndPosition;
    }
    /**
     * @return {?}
     */
    endMoveEllipse() {
        this.lastDraggedToPosition = undefined;
    }
    /**
     * @private
     * @return {?}
     */
    updateMinorRadiusEditPoints() {
        if (this._minorRadius === undefined) {
            return;
        }
        if (this._minorRadiusPoints.length === 0) {
            this._minorRadiusPoints.push(new EditPoint(this.id, new Cesium.Cartesian3(), this.pointProps, true));
            this._minorRadiusPoints.push(new EditPoint(this.id, new Cesium.Cartesian3(), this.pointProps, true));
        }
        this._minorRadiusPoints[0].setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this._center.getPosition(), this._minorRadius, this.getRotation() - Math.PI / 2));
        this._minorRadiusPoints[1].setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this._center.getPosition(), this._minorRadius, this.getRotation() + Math.PI / 2));
    }
    /**
     * @return {?}
     */
    getMajorRadius() {
        return this._majorRadius || 0;
    }
    /**
     * @return {?}
     */
    getMinorRadius() {
        if (this._minorRadius === undefined) {
            return this.getMajorRadius();
        }
        else {
            return this._minorRadius;
        }
    }
    /**
     * @return {?}
     */
    getRotation() {
        return this._rotation || 0;
    }
    /**
     * @return {?}
     */
    updateRotation() {
        if (!this._majorRadiusPoint) {
            return 0;
        }
        /** @type {?} */
        const azimuthInDegrees = this.coordinateConverter.bearingToCartesian(this.getCenter(), this._majorRadiusPoint.getPosition());
        this._rotation = Cesium.Math.toRadians(azimuthInDegrees);
        return this._rotation;
    }
    /**
     * @return {?}
     */
    getRotationCallbackProperty() {
        return new Cesium.CallbackProperty(() => Math.PI / 2 - this.getRotation(), false);
    }
    /**
     * @return {?}
     */
    getMinorRadiusCallbackProperty() {
        return new Cesium.CallbackProperty(() => this.getMinorRadius(), false);
    }
    /**
     * @return {?}
     */
    getMajorRadiusCallbackProperty() {
        return new Cesium.CallbackProperty(() => this.getMajorRadius(), false);
    }
    /**
     * @return {?}
     */
    getCenter() {
        return this._center ? this._center.getPosition() : undefined;
    }
    /**
     * @return {?}
     */
    getCenterCallbackProperty() {
        return new Cesium.CallbackProperty(() => this.getCenter(), false);
    }
    /**
     * @return {?}
     */
    dispose() {
        if (this._center) {
            this.pointsLayer.remove(this._center.getId());
        }
        if (this._majorRadiusPoint) {
            this.pointsLayer.remove(this._majorRadiusPoint.getId());
        }
        if (this._minorRadiusPoints) {
            this._minorRadiusPoints.forEach(point => this.pointsLayer.remove(point.getId()));
        }
        this.ellipsesLayer.remove(this.id);
    }
    /**
     * @return {?}
     */
    getId() {
        return this.id;
    }
    /**
     * @private
     * @return {?}
     */
    updateEllipsesLayer() {
        this.ellipsesLayer.update(this, this.id);
    }
    /**
     * @private
     * @return {?}
     */
    updatePointsLayer() {
        if (this._center) {
            this.pointsLayer.update(this._center, this._center.getId());
        }
        if (this._majorRadiusPoint) {
            this.pointsLayer.update(this._majorRadiusPoint, this._majorRadiusPoint.getId());
        }
        if (this._minorRadiusPoints.length > 0) {
            this.pointsLayer.update(this._minorRadiusPoints[0], this._minorRadiusPoints[0].getId());
            this.pointsLayer.update(this._minorRadiusPoints[1], this._minorRadiusPoints[1].getId());
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._center;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._majorRadiusPoint;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._majorRadius;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._minorRadius;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._rotation;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.doneCreation;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._enableEdit;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._minorRadiusPoints;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.lastDraggedToPosition;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._ellipseProps;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._pointProps;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._polylineProps;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype._labels;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.ellipsesLayer;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.pointsLayer;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.coordinateConverter;
    /**
     * @type {?}
     * @private
     */
    EditableEllipse.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,